
Project Proposal: Persistent Rootkit through Kernel Module Injection
Goal/Motivation: To understand the inner workings of malware at the kernel level and to gain a
deeper understanding of the constraints and possibilities of actions in the kernel space.
Team Members:
Cyrus Majd cm1355, Nicholas Gottwerth nmg138, and Ethan Smithweiss ejs235
Feature Timeline:
● Mid-to-late March:
○ Privilege escalation backdoor (either through signals or ioctls)
○ Compromising /dev/urandom
○ Hiding files and/or directories from userspace
● Rest of the semester:
○ Advanced exploration of process injection techniques
■ Overwriting text segment directly
■ Overriding/redirecting dynamic symbols
Evaluation Plans: In order to assess the success of our project, we will evaluate it on several
key points:
1. Demonstrate that the user has an ID of 0 (root) by showing the output of the 'id'
command.
2. Show that we can run 'sudo' commands easily and without any permissions issues.
3. Evaluate the ease of use and setup of the rootkit, including the level of complexity for a
non-technical user.
4. Demonstrate the ability for an unprivileged user to reliably access the rootkit.
5. Show that the rootkit can persist between system boots, even after a system reboot.
Technical Requirements:
● 32-bit virtual machine running through QEMU
● GitHub repository
Description of Project Code Files:
Kernel Module:
● Registers a character device that exposes ioctl commands for the client command
interpreter.
User-facing Application:
● Converts terminal commands from the user into ioctl commands for the registered
character device.
Evaluation of the project will be based on the successful demonstration of these key evaluation
points, and the overall ability of the rootkit to persist in the system and provide access to root
privileges for the user.

